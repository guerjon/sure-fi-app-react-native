-----------------+--------------------------android-----------------+--------------------------

MainActivity -- Entry Point
activity_main.xml -- its just a layout!
AndroidManifest.xml describes the fundamental characteristics of the app and defines each of its components.

when we added an activity to android we have to do 3 things

1.- add the class NameActivity.java 
2.- create the name_activity.xml layout file 
3.- add the <activity> element to the Android Manifest



How to implement a java's librarys to react-native

we need Create our class and extend the class SimpleViewManager with our type, by example if our class is called "OurClass" then



public class OurClass extends SimpleVieManager<OurType>

"OurType" can be our own implementation or we can use some react-native classes like a ImageView, EditView,TextView etc...

since this is a extends from SimpleViewManager we must implemented the getName() method and createViewInstance(ThemedReactContext context)


The user don't need allow push notifications, it is allowed by defaul


***Threads***

On android when starts the first activity, automaticly the first thread is created, this thread is the handler of the user interface.

Algo que queremos recordar es que para hacer procesos que no requieren de la interfaz,  siempre es bueno ponerlos en otro thread y no user el thread principal
ademas no queremos nunca que otros threads cambien directamente aspectos de la interfaz directamente



-----------------+--------------------------redux-----------------+--------------------------
the state, i mean the entire object is of the whole application is stored in an object tree within a single store. 

An actions is a plane object! and is the only way to change something in the principal state.

to make a state change we have to make a dispatch to the store

store.dispatch({
	//action	
});



when a createStore is made, yoy have to pass a redux on in 

by example suppose counter is a function like this

counter(state,action) => {// something}

then you can pass this to a store

var store = Redux.createStore(counter);


remember a redux is a function, this take the actual state and an action like parameters
and return the next state.

Actions must have a type field, in this field the correct action is indicated, this means put a string in the actions by exameple

{
	type: "ADD_TODO",
	otherThings...
}

{
	type : "CONQUER_THE_WORLD",
	otherThings
}


Do not put API calls into reducers.

the structre in the app has to be 
app
	lb
	components
	containers
	reducers
	actions


A pure function only depents of his parameters and never modify the value of the params, insted of this  return a new array o value object.  

-----------------+--------------------------redux-----------------+--------------------------


------------------------------------- Basic redux set up ---------------------------------
1. to do in index.js

	- import Provider from react-redux
	- pass the store to the Provider element
	- wrap our principal component App in Provider
	- save provider in a constant with an arrow function and pass this to AppRegistry



2. create the constants.js, 

	- here we'll place all the values or strings than can be repet.

3. create the reducers

	- for every reducer its good idea put a initial state
	- the function of every reducer should have a funcion with state and action like parameters, state = initial state if state is null
	- in the function we have to check the action.type and return a new state from it, the actions types should be a constant declarated in constans.js

4. combine the reducers in reducers/index.js

	- we need import the funciton combineReducers from 'redux' and pass like an object every reducer in this way combineReducers({reducer1,reducer2,...,reducerN});

5. create the actions

	- the actions are directly linked to the reducers, by example if we have the next reducer

	function reducerX(state = initialState,action){
		switch(action.type){
			case ACTION_1:
				return {
					...newState1
				}
			case ACTION_2:
				return {
					...newState2
				}
				.
				.
				.
			case ACTION_N:
				return {
					...newStateN
				}
		}
	}

	then  in the the actions we have to have actions with the types ACTION_1, ACTION_2,...,ACTION_N this is the razon to have constans.js because in constans we should have this

	export const ACTION_1 = "CONSTANT_TYPE_1";
	export const ACTION_2 = "CONSTANT_TYPE_2";
						.
						.
						.
	export const ACTION_3 = "CONSTANT_TYPE_N";


	so the actions are functions than must to return  a plain object wit a type attribute using a constant something like this

	function actionX(){
		return {
			type: ACTION_1
		}
	}
6. configurate the store 

	- import createStore from redux, and the index.js from reducers (remember here the reducers are combined)
	- export a function than return createStore(app)  where app are the reduers import i mean import app from 'reducers.js'

7. finally we have to do our app Component

	- we need connect function from react-redux package
	- declare the function mapStateToProps, this function take like parameter the general state and you have only take a part of it and return like a new state to the App Component
	- declare the funciton mapDispatchToprops, this function take like parameter the dispatch function here you can pass like parameters to the App Component  

-------------------------------------------------------------------- Basic Redux set up end ---------------------------------------------------------------------------------------


-------------------------------------------------------------------- Bluethooh thing ---------------------------------------------------------------------------------------

Peripherals

	la pieza de metal

Centrals

	Its the Mobile phone 

Generic Access Protocol (GAP)
	Es un protocolo usado por los perifericos
	maneja los requisitos de coneccion de los centrales
	maneja la emisi'on de datos en los perifericos en un lapso de tiempo, es decir esta madre maneja que tan rapido los perifericos emiten los datos y cuales datos.
	Este protocolo tambi'en dice que multiples centrals pueden leer las emiciones de un mismo periferico

Gatt (Generic Attribute Profile )
	Es una como interfaz que usan los centrals o los celulares, para comunicarse con los perifericos
	En este profile se guardan servicios los cuales a su vez guardan caracteristicas
	Cada caracteristica tienen el leer, escribir y notificar como opcion.
	Notificar le dice al periferico que envie una se~nal al central que esta conectado y subscrito a esa caracteristica cuando esa caracteristica sea acualizada

UUID's

	numero extremadamente grandes para identificar a los dispositivos


Activity: Las pantallas en android, una View es un activity
Intent : es una clase que te permite cambiar de una activity a otra.
Dialog: Es un pop up o un toast 

List Adapters ???
Service 
	- Un servicio es un proceso que se queda corriendo el background para que despues otras apps o esta misma pero en diferente tiempo obtengan una respuesta

ServiceConnection
	es una interface y lo unico que hace es monitorear el estado de un servicio, si, como el anterior.



Bluetooth APIs



BroadCasterReciver 
	solo le pasamos un parametro y nos muestra un pop up si hay conexion o no


BTLE_Device
	es un contenedor para los bluetooth device objects 
	aqui se guardan los rssi que son algo en el periferico que se guarda en el cettral ??

ListAdapter_BTLE_Devices esta clase nos ayudara a mostrar al usuario cuales son los dispositivos que se van encontrando pana 


Pasos para obtener esta madre

Primero obtener el bluethootManager, para esto necesitamos la clase BluetoothManager y hacer un cast sobre el contexto, asi


final BluetoothManager  bluetoothManager = (BluetoothManager) ma.getSystemService(Context.BLUETOOTH_SERVICE);

despues de obtener el bluetoothManager tenemos que sacarle el adapter esto se hace con bluetoothManager.getAdapter();

y con esto se inicializan las variables necesarias, al parecer aqui solo es un transpaso de inicializaciones;


despues vamos declarar el metodo scanning, que regresa un boolean que representa el estado del scanner

tambi'en tenemos que declarar el metodo start donde empezaremos o iniciaremos el scanner, si al parecer el scanner tiene que ser inicializado






-------------------------------------------------------------------- Bluethooh thing end ---------------------------------------------------------------------------------------


------------------------------------------Redux && react native-------------------------
la principal idea es declarar un reducer que mantenga el estado de la navegacion en el store
despues en el componente mas alto vamos a declarar el estado de la navegacion y este sera pasado
a todos los hijos como cualquier prop


-------------------------------------------------------------------- Java ---------------------------------------------------------------------------------------

Singleton

El patron de construccion singleton asegura que solo se pueda crear una instancia de alguna clase, esto lo logramos poniendo el cosntructor en privado,

despues de esto tenemos que crear algun metodo estatico que nos regrese una instancia de esta clase, si la clase se instancea a si misma

public class SingletonClass {

    public static SingletonClass singletonClass;

    private SingletonClass() {
    }

    public static SingletonClass getInstance() {
        if(singletonClass == null) {
            singletonClass = new SingletonClass();
        }
        return singletonClass;
    }
}


Observer

El patron observer es un patron de dise~no que define una dependencia del tipo uno a muchos, cuando uno de los objetos cambia su estado notifica a todos los dependientes.
En principio el Sujeto que es quien da los cambios tiene que conocer a todos sus observadores, cuando este hace un cambio, los observadores deben de ser notificados.
El observador debe de tener un metodo el cual implementa del Sujeto con el cual se le notificaran los cambios de estado.


Iterator

El patron iterador define una interfaz la cual puede ser implementada para recorrer una esctructura de datos sin conocer su implementacion interna. 
Este patron no tiene por que solo limitarse a recorrer la estructura, tambi'en se pueden aplicar filtros y anadir otras funcionalidades.

Los principales metodos en la interfaz que habria que implementar son
first()
next()
currentElement()
next? ()



-------------------------------------------------------------------- PUSH NOTIFICATIONS ---------------------------------------------------------------------------------------

Cuando registramos un celular en el servicio, este devuelve un token para el celular, este token lo usa amazon sns para para crear un mobile endpoint, este mobile endpoint nos sirve para enviar directamente las notificaciones es decir amazon envia las notificaciones a este endpoint

SFTP Server	dar.amazon-digital-ftp.com
Port	22
Username	VMXYF20DWG1H8Y
Password	mwu98AsMbl

apk_release/apk/outputs/build/app/android  --< direccioin inversa de apk


en firebase tenemos dos tipos de mensajes
los que pueden ser mostrados como un aviso  (2K)
los que pueden ser manejados por la app (4K y posible payload)

-------------------------------------------------------------------- Javascript ---------------------------------------------------------------------------------------

Object.keys(obj)  return an array with the ordered keys of the object 
	var anObj = { 100: 'a', 2: 'b', 7: 'c' }; 

	console.log(Object.keys(anObj)); // ['2', '7', '100']


array.reduce The function reduce apply a function to all the elements in the array and accumulate it from left to righ


-------------------------------------------------------------------- Javascript ---------------------------------------------------------------------------------------


-------------------------------------------------------------------- Build my own software company ---------------------------------------------------------------------------------------



-------------------------------------------------------------------- Build my own software company ---------------------------------------------------------------------------------------


-------------------------------------------------------------------- Material Design ---------------------------------------------------------------------------------------

change the balls on the init menu, put shawdows around the circle or just show one at the time, don't put one over the other

On Sure-Fi bridges you need put some kind of elevation on the menus.



-------------------------------------------------------------------- Material Design ---------------------------------------------------------------------------------------

