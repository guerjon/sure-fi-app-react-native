package it.innove;


import android.annotation.TargetApi;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.le.ScanCallback;
import android.bluetooth.le.ScanFilter;
import android.bluetooth.le.ScanResult;
import android.bluetooth.le.ScanSettings;
import android.os.Build;
import android.os.Bundle;
import android.os.ParcelUuid;
import android.util.Log;
import com.facebook.react.bridge.*;
import org.json.JSONException;
import android.util.SparseArray;
import java.util.Arrays;

import java.util.ArrayList;
import java.util.List;

import static com.facebook.react.bridge.UiThreadUtil.runOnUiThread;

@TargetApi(Build.VERSION_CODES.LOLLIPOP)
public class LollipopScanManager extends ScanManager {

    List<String> string_data = new ArrayList<>();
    public static final String METHOD_TAG = "METHOD";
    int count = 0;


	public LollipopScanManager(ReactApplicationContext reactContext, BleManager bleManager) {
		super(reactContext, bleManager);
	}

	@Override
	public void stopScan(Callback callback) {
		// update scanSessionId to prevent stopping next scan by running timeout thread
		scanSessionId.incrementAndGet();

		getBluetoothAdapter().getBluetoothLeScanner().stopScan(mScanCallback);
		callback.invoke();
	}

    @Override
    public void scan(ReadableArray serviceUUIDs, final int scanSeconds, ReadableMap options,  Callback callback) {

        ScanFilter.Builder builder = new ScanFilter.Builder();
        List<ScanFilter> filters = new ArrayList<>();

        ScanSettings.Builder scanSettingsBuilder = new ScanSettings.Builder();
        scanSettingsBuilder.setScanMode(0);
        scanSettingsBuilder.setMatchMode(ScanSettings.MATCH_MODE_AGGRESSIVE);
        scanSettingsBuilder.setCallbackType(ScanSettings.CALLBACK_TYPE_ALL_MATCHES);
        filters.add(builder.build());
        getBluetoothAdapter().getBluetoothLeScanner().startScan(filters,scanSettingsBuilder.build(),mScanCallback);
    }
    private final static char[] hexArray = "0123456789ABCDEF".toCharArray();

    public static String bytesToHex(byte[] bytes) {
        char[] hexChars = new char[bytes.length * 2];
        for ( int j = 0; j < bytes.length; j++ ) {
            int v = bytes[j] & 0xFF;
            hexChars[j * 2] = hexArray[v >>> 4];
            hexChars[j * 2 + 1] = hexArray[v & 0x0F];
        }
        return new String(hexChars);
    }

    private String showByteArrayLikeHex(byte[] bytes,boolean withSpace){
        StringBuilder sb = new StringBuilder();
        String format = "%02X";
        if(withSpace){
            format = "%02X ";
        }
        for (byte b : bytes) {
            sb.append(String.format(format, b));
        }
        return sb.toString();
    }

	private ScanCallback mScanCallback = new ScanCallback() {

		@Override
		public void onScanResult(final int callbackType, final ScanResult result) {

			runOnUiThread(new Runnable() {
				@Override
				public void run() {
                    String new_result = Arrays.toString(result.getScanRecord().getBytes());

                    //Log.d(METHOD_TAG,"REAL_BYTES " + showByteArrayLikeHex(result.getScanRecord().getBytes(),true));


                    if(!string_data.contains(new_result)){
                        string_data.add(new_result);
                    }

					String address = result.getDevice().getAddress();
                    Peripheral peripheral = null;
                    SparseArray<byte[]> manufacturer_specific_data= result.getScanRecord().getManufacturerSpecificData();
                    String new_representation = "";


                    if(manufacturer_specific_data.valueAt(0) != null){
                        if(manufacturer_specific_data.valueAt(0).toString() != null){
                            new_representation = bytesToHex(manufacturer_specific_data.valueAt(0));
                        }
                    }

                    if (!bleManager.peripherals.containsKey(address)) {
						peripheral = new Peripheral(result.getDevice(), result.getRssi(), result.getScanRecord().getBytes(), reactContext,new_representation);
						bleManager.peripherals.put(address, peripheral);
					} else {
						peripheral = bleManager.peripherals.get(address);
						peripheral.updateRssi(result.getRssi());
						peripheral.updateData(result.getScanRecord().getBytes());
					}

					try {
						Bundle bundle = BundleJSONConverter.convertToBundle(peripheral.asJSONObject());
						WritableMap map = Arguments.fromBundle(bundle);
						bleManager.sendEvent("BleManagerDiscoverPeripheral", map);
					} catch (JSONException ignored) {

					}
				}
			});
		}

		@Override
		public void onBatchScanResults(final List<ScanResult> results) {
		}

		@Override
		public void onScanFailed(final int errorCode) {
		}
	};
}
